podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/7115-jenkins/jenkins-agent-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi",
      resourceRequestCpu: "1",
      resourceLimitCpu: "2"
    )
  ]
) {
  node('skopeo-pod') {
    // Set your project Prefix using your GUID
    def prefix      = "7115"
    def mvnCmd      = "mvn -s nexus_settings.xml"
    def devProject  = "${prefix}-tasks-dev"
    def prodProject = "${prefix}-tasks-prod"
    def devTag      = "0.0-0"
    def prodTag     = "0.0"
    def destApp     = "tasks-green"
    def activeApp   = ""
    // Checkout Source Code.
    stage('Checkout Source') {
      checkout scm
    }

    // Build the Tasks Service
    dir('openshift-tasks') {
      def version = getVersionFromPom("pom.xml")
      devTag  = "${version}-" + currentBuild.number
      prodTag = "${version}"

      stage('Build war') {
        echo "Building version ${devTag}"
        sh "${mvnCmd} clean package -DskipTests=true"
      }

      // TBD: The next two stages should run in parallel
      parallel {
        // Using Maven run the unit tests
        stage('Unit Tests') {
          echo "Running Unit Tests"
          sh "${mvnCmd} test"
        }

        // Using Maven to call SonarQube for Code Analysis
        stage('Code Analysis') {
          echo "Running Code Analysis"
          sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube.gpte-hw-cicd.svc.cluster.local:9000 -DskipTests"
        }
      }

      // Publish the built war file to Nexus
      stage('Publish to Nexus') {
        sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::https://nexus3-registry.gpte-hw-cicd.svc.cluster.local:5000/repository/releases"
      }

      // Build the OpenShift Image in OpenShift and tag it.
      stage('Build and Tag OpenShift Image') {
        echo "Building OpenShift container image tasks:${devTag}"
        // TBD: Build Image, tag Image
      }

      // Deploy the built image to the Development Environment.
      stage('Deploy to Dev') {
        echo "Deploying container image to Development Project"

        // TBD: Deploy to development Project
        //      Set Image, Set VERSION
        //      Make sure the application is running and ready before proceeding
      }

      // Copy Image to Nexus container registry
      stage('Copy Image to Nexus container registry') {
        echo "Copy image to Nexus container registry"

        // TBD: Copy image to Nexus container registry

        // TBD: Tag the built image with the production tag.
      }

      // Blue/Green Deployment into Production
      // -------------------------------------
      //def destApp   = "tasks-green"
      //def activeApp = ""

      stage('Blue/Green Production Deployment') {
        // TBD: Determine which application is active
        //      Set Image, Set VERSION
        //      Deploy into the other application
        //      Make sure the application is running and ready before proceeding
      }

      stage('Switch over to new Version') {
        echo "Switching Production application to ${destApp}."
        // TBD: Execute switch
      }
    }
  }
}

// Convenience Functions to read version from the pom.xml
// Do not change anything below this line.
// --------------------------------------------------------
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
